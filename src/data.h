#ifndef DATA_H
#define DATA_H

#include <stdint.h>

#define CARD_NAME "Sixteen_0_10V_Out"
#define PROGRAM_NAME "16uout"
#define VERSION "1.0.1"

#define SLAVE_OWN_ADDRESS_BASE 0x72


#define COUNTER_SIZE 4
#define ADC_CH_NO 3
#define ADC_RAW_CHANNELS 5
#define ADC_RAW_VAL_SIZE 2
#define ANALOG_VAL_SIZE 2
#define SERVO_VAL_SIZE 2
#define MIN_CH_NO 1

#define U_OUT_CH_NO 16

#define LED_CH_NO 16

#define UNUSED(X) (void)X      /* To avoid gcc/g++ warnings */


#define CALIBRATION_KEY 0xaa
#define RESET_CALIBRATION_KEY	0x55
#define WDT_RESET_SIGNATURE     0xca
#define WDT_RESET_COUNT_SIGNATURE    0xbe

#define VOLT_TO_MILIVOLT 1000
#define MILIAMPER_TO_MICROAMPER 1000

enum {
	CALIB_IN_PROGRESS = 0,
	CALIB_DONE,
	CALIB_ERROR,
};
enum {
	CALIB_NOTHING = 0,
	CALIB_U_OUT_CH1 ,
	CALIB_LAST_CH = 16,
};

enum I2C_MEM {
	/* i2c memory addresses */
	I2C_MEM_LEDS,
	I2C_MEM_LED_SET = I2C_MEM_LEDS + 2,
	I2C_MEM_LED_CLR,
	
	I2C_MEM_U_OUT,
	I2C_U0_10_OUT_VAL_END = I2C_MEM_U_OUT + U_OUT_CH_NO * ANALOG_VAL_SIZE,

	I2C_MEM_CALIB_VALUE,
	I2C_MEM_CALIB_CHANNEL = I2C_MEM_CALIB_VALUE + 4,
	I2C_MEM_CALIB_KEY,
	I2C_MEM_CALIB_STATUS,
	I2C_MODBUS_SETINGS_ADD,
	I2C_NBS1,
	I2C_MBS2,
	I2C_MBS3,
	I2C_MODBUS_ID_OFFSET_ADD,
	I2C_MEM_WDT_RESET_ADD,
	I2C_MEM_WDT_INTERVAL_SET_ADD,
	I2C_MEM_WDT_INTERVAL_GET_ADD = I2C_MEM_WDT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_SET_ADD = I2C_MEM_WDT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_INIT_INTERVAL_GET_ADD = I2C_MEM_WDT_INIT_INTERVAL_SET_ADD + 2,
	I2C_MEM_WDT_RESET_COUNT_ADD = I2C_MEM_WDT_INIT_INTERVAL_GET_ADD + 2,
	I2C_MEM_WDT_CLEAR_RESET_COUNT_ADD = I2C_MEM_WDT_RESET_COUNT_ADD + 2,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD,
	I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_SET_ADD + 4,
	I2C_MEM_DIAG_TEMPERATURE_ADD = I2C_MEM_WDT_POWER_OFF_INTERVAL_GET_ADD
		+ 4,
	I2C_DIAG_24V_MEM_ADD,
	I2C_DIAG_24V_MEM_ADD1,
	I2C_DIAG_5V_MEM_ADD,
	I2C_DIAG_5V_MEM_ADD1,
	I2C_CAN_REC_MPS_MEM_ADD,

	I2C_DIAG_12V_MEM_ADD, //I2C_BUILD_DAY_MEM_ADD,
	I2C_DIAG_12V_MEM_ADD1, //I2C_BUILD_MOTH_MEM_ADD,
	I2C_MEM_BUTTON,


	I2C_MEM_REVISION_HW_MAJOR_ADD = 250,
	I2C_MEM_REVISION_HW_MINOR_ADD,
	I2C_MEM_REVISION_MAJOR_ADD,
	I2C_MEM_REVISION_MINOR_ADD,
	

	SLAVE_BUFF_SIZE = 255,
};

#define ERROR -1
#define OK 0
#define ARG_CNT_ERR -2
#define ARG_RANGE_ERROR -3
#define IO_ERROR -4

#define STR_(x) #x
#define STR(x) STR_(x)
#define MASK_1 1
#define MASK_2 3
#define MASK_3 7
#define MASK_4 15
#define MASK_5 31
#define MASK_6 63
#define MASK_7 127
#define MASK_(x) MASK_##x
#define MASK(x) MASK_(x)

typedef enum {
	OFF,
	ON,
	STATE_COUNT,
} State;

#endif /* DATA_H */

// vi:fdm=marker
